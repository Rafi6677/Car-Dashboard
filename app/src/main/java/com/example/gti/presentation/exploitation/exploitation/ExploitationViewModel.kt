package com.example.gti.presentation.exploitation.exploitation

import androidx.databinding.Observable
import androidx.lifecycle.ViewModel
import androidx.lifecycle.liveData
import com.example.gti.domain.usecase.*

class ExploitationViewModel(
    private val getLatestOilCheckUseCase: GetLatestOilCheckUseCase,
    private val getLatestOilChangeUseCase: GetLatestOilChangeUseCase,
    private val getLatestOilFilterChangeUseCase: GetLatestOilFilterChangeUseCase,
    private val getLatestAirFilterChangeUseCase: GetLatestAirFilterChangeUseCase,
    private val getLatestCabinFilterChangeUseCase: GetLatestCabinFilterChangeUseCase
) : ViewModel(), Observable {

    fun getLatestOilCheck() = liveData {
        val latestOilCheck = getLatestOilCheckUseCase.execute()
        emit(latestOilCheck)
    }

    fun getLatestOilChange() = liveData {
        val latestOilChange = getLatestOilChangeUseCase.execute()
        emit(latestOilChange)
    }

    fun getLatestOilFilterChange() = liveData {
        val latestOilFilterChange = getLatestOilFilterChangeUseCase.execute()
        emit(latestOilFilterChange)
    }

    fun getLatestAirFilterChange() = liveData {
        val latestAirFilterChange = getLatestAirFilterChangeUseCase.execute()
        emit(latestAirFilterChange)
    }

    fun getLatestCabinFilterChange() = liveData {
        val latestCabinFilterChange = getLatestCabinFilterChangeUseCase.execute()
        emit(latestCabinFilterChange)
    }

    override fun addOnPropertyChangedCallback(callback: Observable.OnPropertyChangedCallback?) {}
    override fun removeOnPropertyChangedCallback(callback: Observable.OnPropertyChangedCallback?) {}

}