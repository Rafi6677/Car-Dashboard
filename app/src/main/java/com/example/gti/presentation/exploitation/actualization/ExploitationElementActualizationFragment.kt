package com.example.gti.presentation.exploitation.actualization

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.navArgs
import com.example.gti.R
import com.example.gti.databinding.FragmentExploitationElementActualizationBinding
import com.example.gti.presentation.di.Injector
import com.example.gti.presentation.exploitation.ExploitationPart
import com.example.gti.utils.KeyboardUtils
import javax.inject.Inject

class ExploitationElementActualizationFragment : Fragment() {

    @Inject
    lateinit var factory: ExploitationElementActualizationViewModelFactory

    private lateinit var binding: FragmentExploitationElementActualizationBinding
    private lateinit var exploitationElementActualizationViewModel: ExploitationElementActualizationViewModel
    private lateinit var exploitationPart: ExploitationPart
    private val args: ExploitationElementActualizationFragmentArgs by navArgs()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        (requireActivity().application as Injector).createExploitationElementActualizationSubcomponent()
            .inject(this)

        exploitationElementActualizationViewModel = ViewModelProvider(this, factory)
            .get(ExploitationElementActualizationViewModel::class.java)
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = DataBindingUtil.inflate(
            inflater,
            R.layout.fragment_exploitation_element_actualization,
            container,
            false
        )

        binding.lifecycleOwner = this

        exploitationPart = ExploitationPart.values()[args.exploitationFragment]

        prepareView()

        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        initButtons()
    }

    private fun prepareView() {
        when (exploitationPart) {
            ExploitationPart.OilChange -> {
                binding.lastPartChangeTitleTextView.text = resources.getString(R.string.last_oil_change)
                binding.lastPartTypeTextView.text = resources.getString(R.string.oil)
            }
            ExploitationPart.OilFilterChange -> {
                binding.lastPartChangeTitleTextView.text = resources.getString(R.string.last_oil_filter_change)
                binding.lastPartTypeTextView.text = resources.getString(R.string.oil_filter)
            }
            ExploitationPart.AirFilterChange -> {
                binding.lastPartChangeTitleTextView.text = resources.getString(R.string.last_air_filter_change)
                binding.lastPartTypeTextView.text = resources.getString(R.string.air_filter)
            }
            ExploitationPart.CabinFilterChange -> {
                binding.lastPartChangeTitleTextView.text = resources.getString(R.string.last_cabin_filter_change)
                binding.lastPartTypeTextView.text = resources.getString(R.string.cabin_filter)
            }
        }

        KeyboardUtils.initHorizontalKeyboardButtonsValues(binding.mileageValueKeyboardLayout)

        binding.newMileageValueTextView.text = resources.getString(R.string.zero)
    }

    private fun initButtons() {
        KeyboardUtils.onHorizontalMileageKeyboardButtonClicked(binding.newMileageValueTextView, binding.mileageValueKeyboardLayout)

        binding.backButtonImageView.setOnClickListener {
            requireActivity().onBackPressed()
        }

        binding.saveButtonImageView.setOnClickListener {
            exploitationElementActualizationViewModel.saveExploitationPartChange(
                requireActivity(),
                viewLifecycleOwner,
                binding,
                exploitationPart)
        }
    }

}