package com.example.gti.presentation.exploitation.actualization

import android.content.Context
import android.widget.Toast
import androidx.databinding.Observable
import androidx.lifecycle.*
import androidx.lifecycle.Observer
import com.example.gti.data.db.model.ExploitationPartChange
import com.example.gti.databinding.FragmentExploitationElementActualizationBinding
import com.example.gti.domain.usecase.*
import com.example.gti.presentation.exploitation.ExploitationPart
import kotlinx.coroutines.launch
import java.util.*

class ExploitationElementActualizationViewModel(
    private val insertExploitationPartChangeUseCase: InsertExploitationPartChangeUseCase,
    private val getLatestOilChangeUseCase: GetLatestOilChangeUseCase,
    private val getLatestOilFilterChangeUseCase: GetLatestOilFilterChangeUseCase,
    private val getLatestAirFilterChangeUseCase: GetLatestAirFilterChangeUseCase,
    private val getLatestCabinFilterChangeUseCase: GetLatestCabinFilterChangeUseCase
) : ViewModel(), Observable {

    fun saveExploitationPartChange(
        context: Context,
        viewLifecycleOwner: LifecycleOwner,
        binding: FragmentExploitationElementActualizationBinding,
        exploitationPart: ExploitationPart
    ) {
        val newPartName = binding.newPartNameEditText.text.toString()
        val mileage = binding.newMileageValueTextView.text.toString().toInt()
        val currentDate = Date().time

        if (newPartName.isEmpty() || mileage == 0) {
            Toast.makeText(context, "Uzupełnij dane.", Toast.LENGTH_SHORT)
                .show()
        } else {
            lateinit var response: LiveData<ExploitationPartChange?>

            when (exploitationPart) {
                ExploitationPart.OilChange -> {
                    response = getLatestOilChange()

                    response.observe(viewLifecycleOwner, Observer {
                        if (it != null && it.lastOilChangeMileage > mileage) {
                            Toast.makeText(context, "Podano przebieg niższy niż ostatnio (${it.lastOilChangeMileage} km).", Toast.LENGTH_SHORT)
                                .show()
                        } else {
                            val exploitationPartChange = ExploitationPartChange(
                                0,
                                newPartName,
                                mileage,
                                currentDate,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                            )

                            insert(context, exploitationPartChange)
                        }
                    })
                }
                ExploitationPart.OilFilterChange -> {
                    response = getLatestOilFilterChange()

                    response.observe(viewLifecycleOwner, Observer {
                        if (it != null && it.lastOilFilterChangeMileage > mileage) {
                            Toast.makeText(context, "Podano przebieg niższy niż ostatnio (${it.lastOilFilterChangeMileage} km).", Toast.LENGTH_SHORT)
                                .show()
                        } else {
                            val exploitationPartChange = ExploitationPartChange(
                                0,
                                newPartName,
                                0,
                                0,
                                mileage,
                                currentDate,
                                0,
                                0,
                                0,
                                0
                            )

                            insert(context, exploitationPartChange)
                        }
                    })
                }
                ExploitationPart.AirFilterChange -> {
                    response = getLatestAirFilterChange()

                    response.observe(viewLifecycleOwner, Observer {
                        if (it != null && it.lastAirFilterChangeMileage > mileage) {
                            Toast.makeText(context, "Podano przebieg niższy niż ostatnio (${it.lastAirFilterChangeMileage} km).", Toast.LENGTH_SHORT)
                                .show()
                        } else {
                            val exploitationPartChange = ExploitationPartChange(
                                0,
                                newPartName,
                                0,
                                0,
                                0,
                                0,
                                mileage,
                                currentDate,
                                0,
                                0
                            )

                            insert(context, exploitationPartChange)
                        }
                    })
                }
                ExploitationPart.CabinFilterChange -> {
                    response = getLatestCabinFilterChange()

                    response.observe(viewLifecycleOwner, Observer {
                        if (it != null && it.lastCabinFilterChangeMileage > mileage) {
                            Toast.makeText(context, "Podano przebieg niższy niż ostatnio (${it.lastCabinFilterChangeMileage} km).", Toast.LENGTH_SHORT)
                                .show()
                        } else {
                            val exploitationPartChange = ExploitationPartChange(
                                0,
                                newPartName,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                mileage,
                                currentDate
                            )

                            insert(context, exploitationPartChange)
                        }
                    })
                }
            }
        }
    }

    private fun getLatestOilChange() = liveData {
        val latestOilChange = getLatestOilChangeUseCase.execute()
        emit(latestOilChange)
    }

    private fun getLatestOilFilterChange() = liveData {
        val latestOilChange = getLatestOilFilterChangeUseCase.execute()
        emit(latestOilChange)
    }

    private fun getLatestAirFilterChange() = liveData {
        val latestOilChange = getLatestAirFilterChangeUseCase.execute()
        emit(latestOilChange)
    }

    private fun getLatestCabinFilterChange() = liveData {
        val latestOilChange = getLatestCabinFilterChangeUseCase.execute()
        emit(latestOilChange)
    }

    private fun insert(context: Context, exploitationPartChange: ExploitationPartChange) = viewModelScope.launch {
        insertExploitationPartChangeUseCase.execute(exploitationPartChange)

        Toast.makeText(context, "Zapisano wymianę części.", Toast.LENGTH_SHORT)
            .show()
    }

    override fun removeOnPropertyChangedCallback(callback: Observable.OnPropertyChangedCallback?) {}
    override fun addOnPropertyChangedCallback(callback: Observable.OnPropertyChangedCallback?) {}

}