package com.example.gti.presentation.exploitation.exploitation

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.findNavController
import com.example.gti.R
import com.example.gti.databinding.FragmentExploitationBinding
import com.example.gti.presentation.di.Injector
import com.example.gti.presentation.exploitation.ExploitationPart
import com.example.gti.utils.StringUtils
import javax.inject.Inject

class ExploitationFragment : Fragment() {

    @Inject
    lateinit var factory: ExploitationViewModelFactory

    private lateinit var binding: FragmentExploitationBinding
    private lateinit var exploitationViewModel: ExploitationViewModel

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        (requireActivity().application as Injector).createExploitationSubcomponent()
            .inject(this)

        exploitationViewModel = ViewModelProvider(this, factory)
            .get(ExploitationViewModel::class.java)
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = DataBindingUtil.inflate(
            inflater,
            R.layout.fragment_exploitation,
            container,
            false
        )

        prepareView()

        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        initButtons()
    }

    private fun prepareView() {
        prepareOilChangeView()
        prepareOilFilterChangeView()
        prepareAirFilterChangeView()
        prepareCabinFilterChangeView()
    }

    private fun prepareOilChangeView() {
        val response = exploitationViewModel.getLatestOilChange()

        binding.oilChangeCardLayout.partChangeTitle.text = resources.getString(R.string.oil_change)

        response.observe(viewLifecycleOwner, Observer {
            if (it != null && it.lastOilChangeMileage > 0) {
                binding.oilChangeCardLayout.mileageValueTextView.text = it.lastOilChangeMileage.toString() + " km"
                binding.oilChangeCardLayout.dateValueTextView.text = StringUtils.formatDateFromTimestampToString(it.lastOilChangeTimestamp)
            } else {
                binding.oilChangeCardLayout.mileageDifferenceValueTextView.text = "Brak danych"
                binding.oilChangeCardLayout.mileageValueTextView.text = "-.- km"
                binding.oilChangeCardLayout.dateValueTextView.text = "-.-"
            }
        })
    }

    private fun prepareOilFilterChangeView() {
        val response = exploitationViewModel.getLatestOilFilterChange()

        binding.oilFilterChangeCardLayout.partChangeTitle.text = resources.getString(R.string.oil_filter_change)

        response.observe(viewLifecycleOwner, Observer {
            if (it != null && it.lastOilFilterChangeMileage > 0) {
                binding.oilFilterChangeCardLayout.mileageValueTextView.text = it.lastOilFilterChangeMileage.toString() + " km"
                binding.oilFilterChangeCardLayout.dateValueTextView.text = StringUtils.formatDateFromTimestampToString(it.lastOilFilterChangeTimestamp)
            } else {
                binding.oilFilterChangeCardLayout.mileageDifferenceValueTextView.text = "Brak danych"
                binding.oilFilterChangeCardLayout.mileageValueTextView.text = "-.- km"
                binding.oilFilterChangeCardLayout.dateValueTextView.text = "-.-"
            }
        })
    }

    private fun prepareAirFilterChangeView() {
        val response = exploitationViewModel.getLatestAirFilterChange()

        binding.airFilterChangeCardLayout.partChangeTitle.text = resources.getString(R.string.air_filter_change)

        response.observe(viewLifecycleOwner, Observer {
            if (it != null && it.lastAirFilterChangeMileage > 0) {
                binding.airFilterChangeCardLayout.mileageValueTextView.text = it.lastAirFilterChangeMileage.toString() + " km"
                binding.airFilterChangeCardLayout.dateValueTextView.text = StringUtils.formatDateFromTimestampToString(it.lastAirFilterChangeTimestamp)
            } else {
                binding.airFilterChangeCardLayout.mileageDifferenceValueTextView.text = "Brak danych"
                binding.airFilterChangeCardLayout.mileageValueTextView.text = "-.- km"
                binding.airFilterChangeCardLayout.dateValueTextView.text = "-.-"
            }
        })
    }

    private fun prepareCabinFilterChangeView() {
        val response = exploitationViewModel.getLatestCabinFilterChange()

        binding.cabinFilterChangeCardLayout.partChangeTitle.text = resources.getString(R.string.cabin_filter_change)

        response.observe(viewLifecycleOwner, Observer {
            if (it != null && it.lastCabinFilterChangeMileage > 0) {
                binding.cabinFilterChangeCardLayout.mileageValueTextView.text = it.lastCabinFilterChangeMileage.toString() + " km"
                binding.cabinFilterChangeCardLayout.dateValueTextView.text = StringUtils.formatDateFromTimestampToString(it.lastCabinFilterChangeTimestamp)
            } else {
                binding.cabinFilterChangeCardLayout.mileageDifferenceValueTextView.text = "Brak danych"
                binding.cabinFilterChangeCardLayout.mileageValueTextView.text = "-.- km"
                binding.cabinFilterChangeCardLayout.dateValueTextView.text = "-.-"
            }
        })
    }

    private fun initButtons() {
        binding.backButtonImageView.setOnClickListener {
            requireActivity().onBackPressed()
        }

        binding.oilCheckCardView.setOnClickListener {

        }

        binding.oilChangeCardLayout.exploitationElementCardView.setOnClickListener {
            val exploitationPart = ExploitationPart.OilChange
            val action = ExploitationFragmentDirections.actionExploitationFragmentToExploitationElementActualizationFragment(
                exploitationPart.value
            )

            it.findNavController().navigate(action)
        }

        binding.oilFilterChangeCardLayout.exploitationElementCardView.setOnClickListener {
            val exploitationPart = ExploitationPart.OilFilterChange
            val action = ExploitationFragmentDirections.actionExploitationFragmentToExploitationElementActualizationFragment(
                exploitationPart.value
            )

            it.findNavController().navigate(action)
        }

        binding.airFilterChangeCardLayout.exploitationElementCardView.setOnClickListener {
            val exploitationPart = ExploitationPart.AirFilterChange
            val action = ExploitationFragmentDirections.actionExploitationFragmentToExploitationElementActualizationFragment(
                exploitationPart.value
            )

            it.findNavController().navigate(action)
        }

        binding.cabinFilterChangeCardLayout.exploitationElementCardView.setOnClickListener {
            val exploitationPart = ExploitationPart.CabinFilterChange
            val action = ExploitationFragmentDirections.actionExploitationFragmentToExploitationElementActualizationFragment(
                exploitationPart.value
            )

            it.findNavController().navigate(action)
        }
    }

}