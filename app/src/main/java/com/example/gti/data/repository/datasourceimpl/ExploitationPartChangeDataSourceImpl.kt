package com.example.gti.data.repository.datasourceimpl

import com.example.gti.data.db.dao.ExploitationPartChangeDAO
import com.example.gti.data.db.model.ExploitationPartChange
import com.example.gti.data.repository.datasource.ExploitationPartChangeDataSource
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class ExploitationPartChangeDataSourceImpl(private val dao: ExploitationPartChangeDAO) : ExploitationPartChangeDataSource {

    override suspend fun insertExploitationPartChangeIntoDB(exploitationPartChange: ExploitationPartChange) {
        CoroutineScope(Dispatchers.IO).launch {
            dao.insertFiltersChangeData(exploitationPartChange)
        }
    }

    override suspend fun updateOilChangeToDB(exploitationPartChange: ExploitationPartChange) {
        CoroutineScope(Dispatchers.IO).launch {
            dao.updateFiltersChangeData(exploitationPartChange)
        }
    }

    override suspend fun deleteOilChangeFromDB(exploitationPartChange: ExploitationPartChange) {
        CoroutineScope(Dispatchers.IO).launch {
            dao.deleteFiltersChangeData(exploitationPartChange)
        }
    }

    override suspend fun deleteAllOilChangeFromDB() {
        CoroutineScope(Dispatchers.IO).launch {
            dao.deleteAllFiltersChangeData()
        }
    }

    override suspend fun getAllOilChangeFromDB(): List<ExploitationPartChange> = dao.getAllFiltersChangeData()

    override suspend fun getLatestOilChangeFromDB(): ExploitationPartChange = dao.getLatestOilChangeData()

    override suspend fun getLatestOilFilterChangeFromDB(): ExploitationPartChange = dao.getLatestOilFilterChangeData()

    override suspend fun getLatestAirFilterChangeFromDB(): ExploitationPartChange = dao.getLatestAirFilterChangeData()

    override suspend fun getLatestCabinFilterChangeFromDB(): ExploitationPartChange = dao.getLatestCabinFilterChangeData()

}